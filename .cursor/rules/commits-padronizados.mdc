---
description: 
globs: 
alwaysApply: false
---
# Commits Padronizados - Uma Tarefa, Um Commit

## Regra Fundamental
**Cada tarefa implementada = 1 commit com mensagem padronizada**

## Formato de Mensagem de Commit

### Padr√£o Obrigat√≥rio:
```
feat: [a√ß√£o espec√≠fica realizada]
```
ou
```
fix: [problema espec√≠fico resolvido]
```

## Tipos de Commit

### üÜï `feat:` - Novas Funcionalidades
Use quando implementar:
- Nova funcionalidade
- Nova p√°gina
- Novo componente
- Nova API/endpoint
- Nova feature de usu√°rio

**Exemplos:**
```
feat: adicionar formul√°rio de contato
feat: implementar sistema de login
feat: criar p√°gina de dashboard
feat: adicionar valida√ß√£o de email
feat: implementar carrousel de imagens
```

### üîß `fix:` - Corre√ß√µes
Use quando corrigir:
- Bugs identificados
- Problemas de performance
- Erros de layout
- Problemas de funcionamento
- Corre√ß√µes de seguran√ßa

**Exemplos:**
```
fix: corrigir responsividade no mobile
fix: resolver erro de valida√ß√£o de formul√°rio
fix: ajustar alinhamento do menu
fix: corrigir link quebrado na navega√ß√£o
fix: resolver problema de carregamento lento
```

## Fluxo de Trabalho

### 1. Implementar Tarefa
- Foque em **uma funcionalidade espec√≠fica**
- Complete toda a implementa√ß√£o da tarefa
- Teste a funcionalidade implementada

### 2. Preparar Commit
- Verifique todos os arquivos modificados
- Certifique-se que apenas arquivos relacionados √† tarefa est√£o inclu√≠dos
- Remova arquivos tempor√°rios ou de teste

### 3. Escrever Mensagem
- Use apenas `feat:` ou `fix:`
- Seja espec√≠fico sobre **o que foi feito**
- Use linguagem clara e objetiva
- Mantenha a mensagem concisa (m√°ximo 50 caracteres)

### 4. Executar Commit
```bash
git add .
git commit -m "feat: [sua a√ß√£o espec√≠fica]"
```

## Diretrizes de Mensagem

### ‚úÖ Boas Pr√°ticas:
- Use verbos no infinitivo
- Seja espec√≠fico sobre a a√ß√£o
- Foque no **resultado** da implementa√ß√£o
- Use portugu√™s claro e direto

### ‚ùå Evite:
- Mensagens gen√©ricas como "feat: atualiza√ß√£o"
- M√∫ltiplas a√ß√µes em uma mensagem
- Linguagem t√©cnica excessiva
- Abrevia√ß√µes desnecess√°rias

## Exemplos Pr√°ticos

### Cen√°rio: Implementando Sistema de Login

**‚ùå Errado:**
```
feat: sistema completo de autentica√ß√£o
```

**‚úÖ Correto:**
```
feat: criar formul√°rio de login
```
*Em seguida, commits separados para:*
```
feat: adicionar valida√ß√£o de credenciais
feat: implementar redirecionamento p√≥s-login
feat: criar p√°gina de logout
```

### Cen√°rio: Corrigindo Problemas

**‚ùå Errado:**
```
fix: v√°rias corre√ß√µes de layout
```

**‚úÖ Correto:**
```
fix: corrigir alinhamento do header
fix: ajustar espa√ßamento dos bot√µes
fix: resolver overflow no mobile
```

## Benef√≠cios desta Abordagem

- **üìã Hist√≥rico Claro**: Cada commit representa uma mudan√ßa espec√≠fica
- **üîç F√°cil Rastreamento**: Identifica√ß√£o r√°pida de quando algo foi implementado
- **‚è™ Rollback Simples**: Revers√£o precisa de funcionalidades espec√≠ficas
- **üë• Colabora√ß√£o**: Equipe entende facilmente as mudan√ßas
- **üìä Relat√≥rios**: Gera√ß√£o autom√°tica de changelogs

## Integra√ß√£o com Implementa√ß√£o Incremental

Esta regra funciona em conjunto com [implementacao-incremental.mdc](mdc:implementacao-incremental.mdc):

1. **Divida** a tarefa em funcionalidades espec√≠ficas
2. **Implemente** uma funcionalidade por vez
3. **Fa√ßa commit** de cada funcionalidade implementada
4. **Confirme** o resultado antes de prosseguir

---

*Mantenha o hist√≥rico de commits limpo e organizando - cada commit deve contar uma hist√≥ria espec√≠fica do desenvolvimento.*

